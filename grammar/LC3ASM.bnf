{
parserClass="cn.codetector.lc3.lc3intellij.parser.LC3Parser"
extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

psiClassPrefix="LC3ASM"
psiImplClassSuffix="Impl"
psiPackage="cn.codetector.lc3.lc3intellij.psi"
psiImplPackage="cn.codetector.lc3.lc3intellij.psi.impl"

elementTypeHolderClass="cn.codetector.lc3.lc3intellij.psi.LC3Types"
elementTypeClass="cn.codetector.lc3.lc3intellij.psi.LC3ElementType"
tokenTypeClass="cn.codetector.lc3.lc3intellij.psi.LC3TokenType"
}

lc3File ::= item*
private item ::= CRLF | WHITE_SPACE | section | COMMENT
section ::= section_begin section_contents section_end
section_begin ::= section_begin_marker address
section_end ::= section_end_marker
section_contents ::= section_content*
section_content ::= label | ((directive | instruction) COMMENT? CRLF) | COMMENT | CRLF
directive ::= directive_key directive_argument?
instruction ::= opcode (instruction_argument (COMMA instruction_argument)*)?
instruction_argument ::= register | label | integer
directive_argument ::= integer | string


address ::= positive_dec | hex | bin
dec ::= positive_dec | negative_dec
integer ::= dec | hex | bin