{
parserClass="cn.codetector.lc3.lc3intellij.parser.LC3Parser"
extends="cn.codetector.lc3.lc3intellij.psi.LC3PsiElement"

psiClassPrefix="LC3ASM"
psiImplClassSuffix="Impl"
psiPackage="cn.codetector.lc3.lc3intellij.psi"
psiImplPackage="cn.codetector.lc3.lc3intellij.psi.impl"

extends("NAMED_LABEL") = "cn.codetector.lc3.lc3intellij.psi.PsiLabel"
extends("REF_LABEL") = "cn.codetector.lc3.lc3intellij.psi.PsiLabelReference"
extends("instruction") = "cn.codetector.lc3.lc3intellij.psi.LC3PsiInstruction"
extends("VALUE") = "cn.codetector.lc3.lc3intellij.psi.LC3PsiValue"

elementTypeHolderClass="cn.codetector.lc3.lc3intellij.psi.LC3Types"
elementTypeClass="cn.codetector.lc3.lc3intellij.psi.LC3ElementType"
tokenTypeClass="cn.codetector.lc3.lc3intellij.psi.LC3TokenType"
}

lc3File ::= item_*
private item_ ::= ((NAMED_LABEL) | (NAMED_LABEL? (instruction | directive))? COMMENT? CRLF)
NAMED_LABEL ::= label
REF_LABEL ::= label
VALUE ::= INTEGER | STRING
immediate ::= VALUE | REF_LABEL
directive ::= DIRECTIVE_MARKER (ORIG_DIR | FILL_DIR | BLKW_DIR | STRINGZ_DIR | END_DIR)
ORIG_DIR ::= ORIG_SYM INTEGER
FILL_DIR ::= FILL_SYM INTEGER
BLKW_DIR ::= BLKW_SYM INTEGER
STRINGZ_DIR ::= STRINGZ_SYM STRING
END_DIR ::= END_SYM

instruction ::= O_INSTRUCTION | OL_INSTRUCTION | OR_INSTRUCTION | ORL_INSTRUCTION | ORR_INSTRUCTION | ORRR_INSTRUCTION
              | ORRI_INSTRUCTION
O_INSTRUCTION ::= RET_INST | RTI_INST | GETC_INST | OUT_INST | PUTS_INST | IN_INST | HALT_INST
OL_INSTRUCTION ::= BR_INST | JSR_INST
OR_INSTRUCTION ::= JMP_INST | JSRR_INST
ORL_INSTRUCTION ::= LD_INST | LDI_INST | LEA_INST | ST_INST | STI_INST
ORR_INSTRUCTION ::= NOT_INST
ORRR_INSTRUCTION ::= AND_INST | ADD_INST
ORRI_INSTRUCTION ::= AND_INST | ADD_INST | LDR_INST | STR_INST


ADD_INST ::= (ADD_OP REGISTER ARG_ARG_SEPARATOR REGISTER ARG_ARG_SEPARATOR (REGISTER | immediate))
AND_INST ::= (AND_OP REGISTER ARG_ARG_SEPARATOR REGISTER ARG_ARG_SEPARATOR (REGISTER | immediate))
BR_INST ::= (BR_OP immediate)
JMP_INST ::= (JMP_OP REGISTER)
JSR_INST ::= (JSR_OP immediate)
JSRR_INST ::= (JSRR_OP REGISTER)
LD_INST ::= (LD_OP REGISTER ARG_ARG_SEPARATOR immediate)
LDI_INST ::= (LDI_OP REGISTER ARG_ARG_SEPARATOR immediate)
LDR_INST ::= (LDR_OP REGISTER ARG_ARG_SEPARATOR REGISTER ARG_ARG_SEPARATOR immediate)
LEA_INST ::= LEA_OP REGISTER ARG_ARG_SEPARATOR immediate
NOT_INST ::= NOT_OP REGISTER ARG_ARG_SEPARATOR REGISTER
RET_INST ::= RET_OP
RTI_INST ::= RTI_OP
ST_INST ::= ST_OP REGISTER ARG_ARG_SEPARATOR immediate
STI_INST ::= STI_OP REGISTER ARG_ARG_SEPARATOR immediate
STR_INST ::= STR_OP REGISTER ARG_ARG_SEPARATOR REGISTER ARG_ARG_SEPARATOR immediate
GETC_INST ::= GETC_OP
OUT_INST ::= OUT_OP
PUTS_INST ::= PUTS_OP
IN_INST ::= IN_OP
HALT_INST ::= HALT_OP

