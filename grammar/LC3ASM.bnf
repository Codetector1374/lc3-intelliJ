{
parserClass="cn.codetector.lc3.lc3intellij.parser.LC3Parser"
extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

psiClassPrefix="LC3ASM"
psiImplClassSuffix="Impl"
psiPackage="cn.codetector.lc3.lc3intellij.psi"
psiImplPackage="cn.codetector.lc3.lc3intellij.psi.impl"

elementTypeHolderClass="cn.codetector.lc3.lc3intellij.psi.LC3Types"
elementTypeClass="cn.codetector.lc3.lc3intellij.psi.LC3ElementType"
tokenTypeClass="cn.codetector.lc3.lc3intellij.psi.LC3TokenType"
}

lc3File ::= item_*
private item_ ::= ((label) | (label? (instruction | directive))? COMMENT? CRLF)
data ::= INTEGER | STRING
directive ::= DIRECTIVE_MARKER (ORIG_DIR | FILL_DIR | BLKW_DIR | STRINGZ_DIR | END_DIR)
ORIG_DIR ::= ORIG_SYM INTEGER
FILL_DIR ::= FILL_SYM INTEGER
BLKW_DIR ::= BLKW_SYM INTEGER
STRINGZ_DIR ::= STRINGZ_SYM STRING
END_DIR ::= END_SYM

instruction ::= ADD_INST | AND_INST | NOT_INST
              | BR_INST | JMP_INST | JSR_INST | JSRR_INST
              | LD_INST | LDI_INST | LDR_INST | LEA_INST
              | RET_INST | RTI_INST
              | ST_INST | STR_INST | STI_INST
              | GETC_INST | OUT_INST | PUTS_INST | IN_INST | HALT_INST
    ADD_INST ::= (ADD_OP REGISTER ARG_ARG_SEPARATOR REGISTER ARG_ARG_SEPARATOR (REGISTER | INTEGER))
    AND_INST ::= (AND_OP REGISTER ARG_ARG_SEPARATOR REGISTER ARG_ARG_SEPARATOR (REGISTER|INTEGER))
    BR_INST ::= (BR_OP label)
    JMP_INST ::= (JMP_OP REGISTER)
    JSR_INST ::= (JSR_OP label)
    JSRR_INST ::= (JSRR_OP REGISTER)
    LD_INST ::= (LD_OP REGISTER ARG_ARG_SEPARATOR label)
    LDI_INST ::= (LDI_OP REGISTER ARG_ARG_SEPARATOR label)
    LDR_INST ::= (LDR_OP REGISTER ARG_ARG_SEPARATOR REGISTER ARG_ARG_SEPARATOR INTEGER)
    LEA_INST ::= LEA_OP REGISTER ARG_ARG_SEPARATOR label
    NOT_INST ::= NOT_OP REGISTER ARG_ARG_SEPARATOR REGISTER
    RET_INST ::= RET_OP
    RTI_INST ::= RTI_OP
    ST_INST ::= ST_OP REGISTER ARG_ARG_SEPARATOR label
    STI_INST ::= STI_OP REGISTER ARG_ARG_SEPARATOR label
    STR_INST ::= STR_OP REGISTER ARG_ARG_SEPARATOR REGISTER ARG_ARG_SEPARATOR INTEGER
    GETC_INST ::= GETC_OP
    OUT_INST ::= OUT_OP
    PUTS_INST ::= PUTS_OP
    IN_INST ::= IN_OP
    HALT_INST ::= HALT_OP

